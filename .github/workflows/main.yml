name: Pipeline-to-DockerHub #This is the name of our workflow displayed in "Actions" tab.

on: #This line describes the condition on which our workflow will be executed.
  push: #So, on "push" (if I or any other developer, working with this project, pushes an update to our branch, then this code will execute).
    branches: #Specified which branch is used as a trigger. In our case - branch main.
      - main

jobs: #This line begins the list of our jobs that will be run by Git.
  build-and-deliver: #The name of the job.
    runs-on: ubuntu-latest #This is the docker image used for the docker container by GitHub. 
    #Because all individual jobs run by gitactions are run in the docker container. Usually, they do so
    #simoltaniously, unless explicitly specified by us.

    steps: #Actually, all the steps that should be run in this particular job.
    - name: Git clone my repository #The name or the tab (better to say) that we will see during our gitactions task.
      uses: actions/checkout@v2 #This is very interesting addon or script. Name as you wish. This script makes a pull
    #request of our repository an then stores it in our docker container in our working directory.
      
    - name: Install Python 3 #Another tab that we will see, during the execution of our gitactions task.
      uses: actions/setup-python@v3 #What is does? Installs python3 on our running container.
      with: #The requirement that should be satisfied.
        python-version: "3.10" #Specifies Python version.
      
    - name: Test my application using unittest #Name of the test tab that will be used to do the unittest on my app.
      run: python3 -m unittest tests.py #Command to run unittest on my app.
       
    - name: Login to docker hub #Another name of the tab.
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9 #Uses login-action script with long version number.
      with: #The requirement that should be satisfied.
          username: ${{ secrets.DOCKER_USERNAME }} #This variable is used to enter my docker hub username in an encrypted way.
          password: ${{ secrets.DOCKER_PASSWORD }} #This variable is used to enter my docker hub password in an encrypted way.
       
    - name: Create docker image from Dockerfile #Another name of the tab.
      run : docker build -t techprog-app-${{ github.sha }}:ver-${{ github.sha }} . #Regular shell command that uses my Dockerfile to build
      #an image with the name techprog-app-${{ github.sha }}:ver-${{ github.sha }}, where ${{ github.sha }} is SHA hashsum of the last commit.
      #Just makes it easy to differentiate between various versions.
        
    - name: Push my docker image to docker hub #Name of the tab that will be used to push created image to the docker hub.
      #The run parameter with pipe symbol is used to execute more then one command under one "run" statement. The first command
      #sets the tag on our created image. The second one pushes that image with specified tag to the docker hub.
      run : | 
              docker tag techprog-app-${{ github.sha }}:ver-${{ github.sha }} jtwist/techprog-app:ver-${{ github.sha }}
              docker push jtwist/techprog-app:ver-${{ github.sha }}
